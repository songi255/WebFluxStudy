# use request filter.
spring.webflux.hiddenmethod.filter.enabled=true

# do not invoke restart by devtools in these paths
spring.devtools.restart.exclude=static/**,public/**

# if false, restart by devtools never invoked
spring.devtools.restart.enabled=true

# turn on logging on WebFlux or Spring MVC App
logging.level.web=DEBUG

# add detail on ping (actuator/health)
management.endpoint.health.show-details=always

# write down application version info for actuator/info
# variable covered by @@ is auto-filled by maven
info.project.version=@project.version@
info.java.version=@java.version@
info.spring.framework.version=@spring-framework.version@
info.spring.data.version=@spring-data-bom.version@

# reactor, rabbitmq, spring data 의 협업과정을 보고싶다면 아래 logging level 을 적용해서 관찰해보자.
logging.level.org.springframework.amqp=DEBUG
logging.level.org.springframework.messaging=DEBUG
logging.level.com.greglturnquist.hackingspringboot=DEBUG
logging.level.org.springframework.data=DEBUG
logging.level.reactor=DEBUG
# 관찰 후 다시 비활성화하자.
# 직접 log 를 모두 살펴보는 것은 message 기반 solution 작성에 많은 도움이 된다.


# reactor netty container 를 실행하면 Springboot 가  자동으로 TCP Rscoket 서비스를 호스팅한다.
# netty server 구동 포트 (이건 사실 기본값 8080 이어도 된다. 그냥 적어둔 것)
server.port=9000

# Rsocket server port (핵심은 rsocket 을 위한 port 를 따로 뚫어줬다는거다)
spring.rsocket.server.port=7000
# Rsocket 전송 protocol
spring.rsocket.server.transport=tcp




