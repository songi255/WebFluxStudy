배압을 이해하고 나면 무언가를 조회하기 위해 network 경계를 넘나들어야 하는데, 주로 HTTP 기반 원격기술을 이용한다.
    - 하지만 HTTP 는 reactive 하지 않다. (요청-응답 일 뿐.)
    - 이에 대한 대안으로, 오래 기다리기 (long polling == comet) 등을 사용하기도 했지만, 자원점유의 한계가 있었다.
    - 그래서 Websocket 이 등장했따.

WebSocket
    - OSI 7 계층에 위치한, 2011년 표준화된 최신 Protocol
    - 양방향에, 가볍고, 비동기를 지원하지만, 배압개념이 없어 reactive 하지는 않다.
    - 이를 보완하기 위해 나온 것이 RSocket 이다.

R Socket (https://rsocket.io/)
    - vmware, meta, Netifi, Alibaba 등 여러 회사가 설립한 Reactive Foundation 에서 공동으로 만들었다.
    - Java 외에도, JS, Go, .NET, C++, Kotlin 을 지원하는 명세를 포함하고 있다.
    - Rsocket 에서 사용되는 reactive stream Java 구현체 또한 reactor 이다. 상호운용성도 대단해서 큰 장점이 된다.
    - reactive protocol 을 위해서는 어떤 점들이 고려되어야 할까?
        - R socket 은 Websocket, TCP, Aeron 등 여러 Protocol 위에서 동작하도록 설계되었다.
            - 특히, 이중에서 Websocket 은 아주 가볍고 유연해서 Rsocket이 필요로 하는 모든 것을 지원한다.
            - TCP 를 이용하면 fault-tolerant (장애내성) 과 확장성을 가진 연결을 할 수 있다.
            - Aeron 은 UDP 위에서 동작하는 Message Protocol 이다.
                - reactor app 은 workload (작업부하) 사이를 오가는 worker thread 를 이용한다.
                    - 즉, 작업부하가 여러가지 message 로 부터 만들어진다는 사실은 어렵지 않게 유추할 수 있다.

여기서는 TCP 를 이용한 방법을 살펴보도록 한다.

R Socket 에는 4가지 패러다임이 존재한다.
    - request-response (요청-응답 : 1개의 stream)
        - 고전적이다. 하지만 실제 통신에서 일반적으로 필요한 요구사항의 80% 이상은 이 방식으로 해결할 수 있다.
        - HTTP 는 오직 이것만 지원하기에 문제다.
    - request-stream (요청-스트림 : 다수의 유한한 stream)
        - long polling 은 받을때마다 처리하고 다시 요청을 반복해야 한다. 이는 많은 오버헤드가 동반된다. 스레드도 점유된다.
        - r socket 에서는 채널 열고, 요청 보낸 후, stream 형태로 응답을 주고받을 수 있다.
            - 주식 종목 가격정보를 stream 형태로 계속 응답받는 상황이 대표적이다.
            - 물론 그렇다고 server 가 10만개 가격정보 update 를 한번에 전송해도 된다는 뜻은 아니다.
    - fire-and-forget (실행 후 망각 : 무응답)
        - 응답은 원래의 요청과 연관되어야 하기 때문에, correlation ID (연관 ID) 를 사용하기도 한다. 이 과정에서 여러 복잡성이 생겨난다.
        - 꼭 결과가 필요하지 않다면, R socket 에서는 이를 제거할 수 있다.
    - channel (채널 : 양방향)
        - 요청이 무조건 client 라는 틀을 꺠고, 진정한 message-driven 통신채널을 실현한다.
        - 양쪽 모두 메시지 전송 가능하고, 양쪽 모두 listener 를 등록해야 한다.
        - 심지어 배압기능도 포함되어있다.


R socket 은 server 와 client 2개가 필요하다. 여기서는 그냥 한곳에 뭉쳐놓겠다.

실습에는 mongodb 가 필요한데, docker 가 설치되있다면
    - docker run -p 27017-27019:27017-27019 mongo
    - 위 명령어로 쉽게 mongodb 를 실행할 수 있다.