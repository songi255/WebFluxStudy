<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.7.5</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <!-- parent에 spring-boot-starter-parent 를 등록했다. 무슨 역할일까?
        미리 정의된 여러 속성정보, 의존관계, 플러그인들을 상속받는다.
        미리 정의된 의존관계가 가장 핵심인데, 전체 Spring portfolio 와 Jackson, Netty, Project Reactor 등 다양한 서브파티도 포함된다.
        다른 라이브러리가 필요하면 pom에 추가만 하면 Spring Boot가 Parent를 바탕으로 적합한 버전을 찾아 사용할 수 있게 해준다.
        즉, Boot의 새 버전이 나왔다면, Parent 버전 하나만 갱신하면 포함된 모든 라이브러리도 적합한 버전으로 자동 업그레이드되는 것이다.
    -->

    <groupId>com.greglturnquist</groupId>
    <artifactId>hacking-spring-boot-reactive</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>WebfluxStudy</name>
    <description>WebfluxStudy</description>
    <properties>
        <java.version>11</java.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-webflux</artifactId>
        </dependency>

        <!-- scope가 test인 의존관계들. -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- spring-boot-starter-test에는 다음이 포함된다.
             AssertJ, Hamcrest, HTMLUnit, JSONassert, JsonPath, JUnit5, Mockito, Selenium, Spring Test, XMLUnit-->
        <dependency>
            <groupId>io.projectreactor</groupId>
            <artifactId>reactor-test</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- 전통적인 블로킹 방식은 spring-boot-starter-data-mongodb. 아래 4가지 의존관계를 포함한다.
            1. spring-boot-starter
            2. spring-data-mongodb : blocking 방식 driver 제외된 spring mongodb
            3. mongodb-driver-reactivestreams : mongodb 공식 reactive stream driver
            4. reactor-core : project reactor core module
        -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-mongodb-reactive</artifactId>
        </dependency>

        <!-- 내장형 mongodb 도구. test 에 주로 사용하며 application 초기 설계 단계에서 data store 로 사용할 수 있다. -->
        <dependency>
            <groupId>de.flapdoodle.embed</groupId>
            <artifactId>de.flapdoodle.embed.mongo</artifactId>
        </dependency>

        <!-- reactive가 아닌 전통적 mongodb driver. -->
        <dependency>
            <groupId>org.mongodb</groupId>
            <artifactId>mongodb-driver-sync</artifactId>
        </dependency>

        <!-- Spring Boot 의 개발자도구이다. 포함된 기능은 다음과 같다.
                - App restart / reload
                    - 개발자가 작성한 코드를 하나의 ClassLoader 로 로딩하고, third party lib 는 별도의 Loader 로 로딩한다.
                    - App 이 재시작되면 개발자가코드 ClassLoader는 재시작되지만, third party 로드했던 Loader는 그대로 남아, 훨씬 빠르다.
                        - 참고로 모든것을 새로 시작하는 것은 cold 방식이라고 한다.
                        - 하지만 한계가 있기 때문에, reload 개선효과를 최대로 끌어내려면 JRebel 같은 Java Agent Solution 이 필요할 수도 있다.
                    - 아쉽게도 IntelliJ 에서는 수정한다고 reload 되지 않는다. 프로젝트 build 를 하면 reload 된다.
                    - eclipse 는 save가 명확한 trigger 가 될 수 있기에, 수정 시 재실행된다.
                - 환경설정정보 기본값 제공
                - autoconfiguration 변경사항 로깅
                    - autoconfiguration 은 편리하지만, 때론 어떻게 동작하는 지 파악하기 어려울 수 있다.
                    - 그렇다고 모든 결정내용을 보려면 분량이 너무 많을 것이다.
                    - 그래서 SpringBoot2 부터 자동설정 기본값과 다르게 설정 된 부분만 확인할 수 있도록 변경사항을 관리한다.
                - 정적 자원 제외
                    - 기본적으로 Spring Boot 는 다음과 같은 자원에는 변경이 발생해도 재시작하지 않는다.
                        - /META-INF/maven
                        - /META-INF/resources
                        - /resources
                        - /static
                        - /public
                        - /templates
                    - 대부분 web stack 에서는 static resource 들은 재부팅없이도 Server에 반영할 수 있기 때문이다.
                    - 만약 변경사항이 재시작하지 않게 하는 경로를 커스터마이징하고싶다면 aplication.properties 에 작성하면 된다.
                        - 특히 frontend 개발도구와의 충돌문제를 우회하는데 유용하다.
                - LiveReload 지원
                    - devTools 에는 LiveReload Server 가 내장되어있다. 사용을 위해서는 브라우저에도 LiveReload 플러그인을 설치해야 한다.
                        - 포트문제인지 하나의 장비에서 오직 하나의 LiveReload Server 만 실행할 수 있다.
                - 개발모드에서 캐시 비활성화
                    - Spring Boot 의 많은 컴포넌트들은 다양한 cache 기능을 가지고있다.
                        - 예를 들어 어떤 template engine 은 compile 된 template 을 cache 한다.
                        - 이는 상용 운영환경에서는 편리한 기능이나, 변경사항을 계속 확인해야 하는 개발과정에서는 불편하다.
                    - spring.thymeleaf.cache=false 같이 여러 옵션을 설정할 수 있다. 하지만, 환경이 변할 때 마다 켜고끄는것은 매우 귀찮다.
                    - 이때 devtools 가 dependency 에 있으면, 실행환경에 따라 여러 환경설정이 property default 로 설정되어 편리하다 (로그에도 Devtools 가 찍힌다.)
                        - 이 로그에 property default 비활성화방법도 나오며, IDE에서 DevToolsPropertyDefaultProcessor 를 열어보면 영향받는 모든 속성을 볼 수 있다.
                - Web logging 확인하기
                    - WebFlux나 Spring MVC로 만들어진 어플리케이션에 로깅활성화할 수 있다.
                    - logging.level.web=DEBUG
                    - 예컨데, 로깅코드나 Class 수준 debugging 설정을 뒤져보지 않아도 간단하게 장바구니에 상품추가할 때 무슨일이 일어나는 지 알 수 있다.

            Project Reactor 용 devTools 내용은 다음과 같다.
                - reactor flow debugging
                    - 리액터 처리과정은 일반적으로 여러 스레드에 걸쳐 수행된다. 즉, print stack trace가 끊겨버린다.
                    - reactor로 작성하는 일련의 연산은 recipe 라고 볼 수 있다. Spring reference docs 에는 assembly 라고 표현한다.
                - 이 한계는 Reactor 의 Hooks.onOperatorDebug() 를 통해 극복할 수 있다!
                    - code를 ReactorDebuggingExample class 에 적어놓겠다. 단순히 Hooks.onOperatorDebug() 만 호출하는게 전부이다!
                    - 어떤 원리일까? reactor 가 처리흐름 조립시점에 호출부 세부정보를 수집, 구독해서 실행되는 시점에 세부정보를 넘겨준다.
                        - 당연히, 많은 비용이 든다. 실제 운영환경에서는 Hooks.onOperatorDebug() 를 절대 호출해서는 안된다!
                        - 도저히 다른 방법이 없어 호출해야한다면 반드시 적절한 조건을 사용해서 해당 조건을 만족할 때만 실행해야 한다.
                        - devTools에 운영환경에 영향을 가장 적게 미치는 도구가 있는지 지속적으로 살펴보는 것도 매우 중요하다.
                - reactor flow logging
                    - 함수형 프로그래밍에서는 log.debug() 를 찍고싶어도 제약이 많다. 깔끔한 function 안에 비집어넣어야 한다던가..
                    - 해결법은 reactor 에서 .log("내용") 체이닝을 지원한다. 그래서 flow 중에 원할때마다 호출해서 찍으면 된다.
                    - logging library 는 흔히 패키지를 포함한 class 전체 이름을 사용하지만, c.g.h.r InventoryService 같이, 패키지경로 축약해서 보여줄 수도 있다.
                    - log 로 찍으면, 인자로 넘겨진 문자열과 함께 reactive stream signal 이 같이 출력된다.
                        - .log()의 로그수준 기본값은 INFO 이다. 하지만 2번째 인자로 LEVEL 을 넘겨줄 수 있다.
                        - 3번째 인자로는 reactive stream의 signal을 넘겨줄 수 있다. 해당하는 signal 에만 출력한다.
                    - log 를 확인해보면, reactor flow 는 대체로 소스코드 상 맨 아래있는 것부터 시작해서 위로 올라가면서 실행된다.
         -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
        <!-- optional 은 이 dependecy는 실제 상용운영코드에는 추가되지 않는다는 의미이다. -->
        <!-- spring devtools는 App 시작방법을 몰래 훔쳐본다.
                - java -jar 명령이나 클라우드 서비스 제공자가 사용하는 특별한 classLoader를 통해 App 실행 시, 이번 실행은 상용이다 라고 판단하고 기능을 비활성화한다.
                - 하지만 IDE 에서 실행되거나, Maven의 spring-boot:run 명령으로 실행되면 해당 실행은 개발모드라고 판단하고 개발자도구의 모든 기능을 활성화한다.
         -->

        <!-- reactive 프로그래밍에는 blocking code 가 절대로 하나라도 호출되면 안된다. 단 한 사람으로 인해 시스템이 망가지는 위험을 방치해도 괜찮은걸까?
            이때 block hound 가 나타난다. blocking code가 소스코드 어디에도 없고, 관련 설정도 적절하다는 것을 보장한다.
                - reactor 개발팀의 Java 챔피언인 Sergei Egorov 가 만들었다.
                - 개발자코드 뿐만 아니라, 써드파티 lib 에 사용된 내용도, JDK 자체에서 호출되는 블로킹코드까지도 찾아내는 Java Agent 이다.
            블록하운드는 그 자체로는 아무일도 하지 않는다. 적절하게 설정되면 Agent API를 이용해서 검사한다. Spring Boot 시작 수명주기에 blockhound 를 등록해보자.
                - main에서 run 하기 전에 BlockHound.install(); 호출해주면 된다.
                - run 보다 앞서 실행되어, BlockHound 가 바이트코드를 instrument(조작)할 수 있게 된다.
                - 이제 실행해보면, localhost:8080 에서 오류로그가 출력되는데, 이유는 FileInputStream.readBytes() 의 JDK 소스코드를 살펴보면 된다.
                    - 일부가 C 언어로 구현되어있는 native method 인데, 이것까지 검출할 수 있다.
            블로킹코드는 하나라도 포함되면 reactive programming은 제대로 동작하지 않는다. 이 문제는 어떻게 해결할 수 있을까?
                1. thymeleaf에 ticket 을 생성해서 해결
                2. JDK 에 ticket 을 생성해서 해결
                3. blocking 부분을 수용가능하다고 판단하고 BlockHound가 해당부분을 건너뛰게 한다.
            블록하운드에는 여러 옵션이 있다. 허용리스트, 금지리스트도 있다. 그렇다면 구체적으로 무엇을 허용해야 할까?
                - readBytes() 를 추가할 수도 있지만, 너무 저수준의 메소드를 허용하는 것은 좋지 않다.
                    - JDK에 포함된 readBytes() 를, 어디서 호출하는지 모두 파악하지 않은 상태에서 허용한다면, 누군가 무책임하게 호출하는 부분을 검출할 수 없게되며, 결국 시스템 위험요소로 남게된다.
                - 정확하게 thymeleaf 에서 template 를 읽는 부분에 사용된 TemplateEngine.process() 만 콕 집어서 허용하는게 바람직할 것이다.
            Java Agent 를 사용하기 때문에, Application에 심은 후에 제거하는 방법은 없고, 종료 후 install() 코드 자체를 제거하는 것이 유일한 방법이다.
         -->
        <dependency>
            <groupId>io.projectreactor.tools</groupId>
            <artifactId>blockhound</artifactId>
            <version>1.0.6.RELEASE</version>
        </dependency>

        <!-- blockhound 는 test 환경에서만 사용하는 것이 더 낫다. Junit 과 함께 사용하려면 다음 dependency 를 추가한다. -->
        <dependency>
            <groupId>io.projectreactor.tools</groupId>
            <artifactId>blockhound-junit-platform</artifactId>
            <version>1.0.6.RELEASE</version>
            <scope>test</scope>
        </dependency>
        <!-- 이제 Blockhound 가 JUnit 플랫폼의 TestExecutionListener 를 지원하므로, test method 에 사용된 blocking code 를 검출할 수 있게 되었다.
                BlockingTest class 로 이동해서 마저 알아보자!-->

        <!-- actuator -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <!-- WebTestClient 에 Spring REST doc 기능을 추가해준다. (Spring MVC 면 다른 Test 모듈을 사용하므로, 다르게 해야 한다.) -->
        <dependency>
            <groupId>org.springframework.restdocs</groupId>
            <artifactId>spring-restdocs-webtestclient</artifactId>
            <version>2.0.6.RELEASE</version>
            <scope>test</scope>
        </dependency>

        <!-- HATEOAS -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-hateoas</artifactId>
            <exclusions>
                <!-- HATEOAS 는 원래 Spring MVC 지원용이라, web 이 포함되있다. 우린 webflux 를 쓰므로 제외해줘야 한다. -->
                <exclusion>
                    <artifactId>spring-boot-starter-web</artifactId>
                    <groupId>org.springframework.boot</groupId>
                </exclusion>
            </exclusions>
        </dependency>

    </dependencies>

    <build>
        <!-- Maven plugin. Java build 도구이다.
            Jar 스펙은 다른 Jar파일을 내부에 embed 하는 표준을 정해놓지 않았다. 그래서 선언된 모든 의존관계를
            이 플러그인이 최종 Jar에 집어넣고, 클래스 로딩용 일부코드도 포함시킨다. 게다가 Jar을 executable 하게 만들어준다.

            third party lib Jar을 풀어 Class 파일을 최종 Jar에 넣는 작업을 Shading 이라고 한다.
            다른 플러그인들은 안정적이지 않으며, 라이선스에 저촉될 수 있다.
         -->

        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <layers>
                        <enabled>true</enabled>
                    </layers>
                </configuration>
            </plugin>
            <!-- docker cache system 을 사용하기 위해 build 시 layer 를 사용하겠다고 설정했다. JAR 생성 command 에 변화는 없다.
                ./mvnw clean package -DskipTests
             -->

            <!-- git commit과 branch 정보도 actuator/info 를 통해 확인할 수 있게 해준다.
                아래 플러그인은 git.properties를 생성해서 git 정보를 관리하고, spring boot 는 이 파일을 읽어 git 정보를 반환한다.
            -->
            <plugin>
                <groupId>pl.project13.maven</groupId>
                <artifactId>git-commit-id-plugin</artifactId>
            </plugin>

            <!-- API Portal 생성을 위한 Ascii doctor
                    - asciidoctor-maven-plugin 은 .adoc 아스키독 파일을 HTML 로 변환해준다.
                    - Spring REST docs 는 .adoc 파일의 주요내용을 자동생성해준다.
                    - 최종 HTML 은 target/generated-docs 에 저장된다.
            -->

            <plugin>
                <groupId>org.asciidoctor</groupId>
                <artifactId>asciidoctor-maven-plugin</artifactId>
                <version>2.2.2</version>
                <executions>
                    <execution>
                        <id>generate-docs</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>process-asciidoc</goal>
                        </goals>
                        <configuration>
                            <backend>html</backend>
                            <doctype>book</doctype>
                        </configuration>
                    </execution>
                </executions>
                <dependencies>
                    <dependency>
                        <groupId>org.springframework.restdocs</groupId>
                        <artifactId>spring-restdocs-asciidoctor</artifactId>
                        <version>2.0.6.RELEASE</version>
                    </dependency>

                </dependencies>
            </plugin>

            <!-- 생성된 DOCS 문서를 static content 폴더로 복사하는 플러그인 설정. JAR 생성 시 적용된다. -->
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.3.0</version>
                <executions>
                    <execution>
                        <id>copy-resources</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.outputDirectory}/static/docs</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${project.build.directory}/generated-docs</directory>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

        </plugins>

        <!-- trouble shooting.. main class 를 찾지 못하는 문제를 pluginManagement 로 감싸 해결. -->
    </build>

</project>
