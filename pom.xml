<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.7.5</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <!-- parent에 spring-boot-starter-parent 를 등록했다. 무슨 역할일까?
        미리 정의된 여러 속성정보, 의존관계, 플러그인들을 상속받는다.
        미리 정의된 의존관계가 가장 핵심인데, 전체 Spring portfolio 와 Jackson, Netty, Project Reactor 등 다양한 서브파티도 포함된다.
        다른 라이브러리가 필요하면 pom에 추가만 하면 Spring Boot가 Parent를 바탕으로 적합한 버전을 찾아 사용할 수 있게 해준다.
        즉, Boot의 새 버전이 나왔다면, Parent 버전 하나만 갱신하면 포함된 모든 라이브러리도 적합한 버전으로 자동 업그레이드되는 것이다.
    -->

    <groupId>com.greglturnquist</groupId>
    <artifactId>hacking-spring-boot-reactive</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>WebfluxStudy</name>
    <description>WebfluxStudy</description>
    <properties>
        <java.version>11</java.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-webflux</artifactId>
        </dependency>

        <!-- scope가 test인 의존관계들. -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- spring-boot-starter-test에는 다음이 포함된다.
             AssertJ, Hamcrest, HTMLUnit, JSONassert, JsonPath, JUnit5, Mockito, Selenium, Spring Test, XMLUnit-->
        <dependency>
            <groupId>io.projectreactor</groupId>
            <artifactId>reactor-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <!-- Maven plugin. Java build 도구이다.
            Jar 스펙은 다른 Jar파일을 내부에 embed 하는 표준을 정해놓지 않았다. 그래서 선언된 모든 의존관계를
            이 플러그인이 최종 Jar에 집어넣고, 클래스 로딩용 일부코드도 포함시킨다. 게다가 Jar을 executable 하게 만들어준다.

            third party lib Jar을 풀어 Class 파일을 최종 Jar에 넣는 작업을 Shading 이라고 한다.
            다른 플러그인들은 안정적이지 않으며, 라이선스에 저촉될 수 있다.
         -->
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>
